#!/usr/bin/env sh

: ${WHISPER_GOSECRET:=https://www.gosecret.io}

# creates a new secret
# $1 - message
# $2 - password
# returns the message id
create_secret() {
  message="$1"
  [ ! -z "$2" ] && password="$2" || password=""
  [ ! -z "$3" ] && lifespan="$3" || lifespan="5m"
  json=$(jq --null-input \
    --arg msg "$message" \
    --arg pass "$password" \
    --arg life "$lifespan" \
    '
    {
      "message": $msg,
      "password": $pass,
      "lifespan": $life
    }' \
  )
  curl -s -L -X POST "$WHISPER_GOSECRET/api/create" \
    --header 'Content-Type: application/json' \
    --data-raw "${json}" \
    | jq -r '.message' \
    | sed 's/^\/secrets\///g'

  # fetep please teach
  unset message
  unset password
  unset json
  unset lifespan
}

# view a secret

view_secret() {
  id="$1"
  [ ! -z "$2" ] && password="$2" || password=""
  [ ! -z "$password" ] \
    && json=$(jq --null-input --arg pass "$password" '{"password": $pass}') \
    || json=$(jq --null-input '{}')

  curl -s -L -g -X POST "$WHISPER_GOSECRET/api/secrets/${id}" \
    --header 'Content-Type: application/json' \
    --data-raw "${json}" \
    | jq -r ' .message '
  unset id
  unset password
  unset json
}

read_password(){
  password="$WHISPER_PASSWORD"
  if [ -z "$WHISPER_PASSWORD" ]; then
    stty -echo
    printf "password: "
    read password
    stty echo
    printf "\n"
  fi
}

usage() {
  cat <<EOF
whisper - exchange secrets in the shell, powered by gosecret.io

whisper -m "a secret"
whisper -s "06fc3b7879d94509ac84a2413621a438"

-m [MESSAGE]
      the message you want to send in secret, will use stdin if this is empty
-s [SECRET ID]
      the secret id you want to read, will use stdin if this is empty
-p
      add a password to the create or read function, by default this is interactive
      if WHISPER_PASSWORD is available in the environment, then it takes precedence
-l [LIFESPAN]
      specify a lifespan when you create a password ISO-8601, will default to '5m'

EOF
}

MODE=""
while getopts ":m::s:pl:" option; do
  case ${option} in
    m)
      # the message, if empty, take from stdin
      [ "$MODE" = "view" ] && usage && exit 1
      MODE="message"
      message="${OPTARG}"
      ;;
    s)
      # the secret, if empty, take from stdin
      [ "$MODE" = "message" ] && usage && exit 1
      MODE="view"
      id="${OPTARG}"
      ;;
    p)
      # password protected
      read_password
      ;;
    l)
      # lifespan
      lifespan=${OPTARG}
      ;;
  esac
done
[ -z "$MODE" ] && usage && exit 1
[ "$MODE" = "view" ] && view_secret "$id" "$password"
[ "$MODE" = "message" ] && create_secret "$message" "$password" "$lifespan"
